const ArgumentType = require('../../extension-support/argument-type');
const BlockType = require('../../extension-support/block-type');
const msg = require('./translation');
const formatMessage = require('format-message');
//
const ml5 = require('ml5');
const menuIconURI = null;
const blockIconURI = null;

const LASS_URI = 'https://pm25.lass-net.org/data/last.php?device_id=';
const AQI_URI = 'https://data.epa.gov.tw/api/v1/aqx_p_432?limit=1000&api_key=9be7b239-557b-4c10-9775-78cadfc555e9&format=json';

const defaultId = 'WF_12743501';
const defaultsiteName = '板橋';
let theLocale = null;
//let SN_array = ['基隆', '汐止', '萬里', '新店', '土城', '板橋', '新莊', '菜寮', '林口', '淡水', '士林', '中山', '萬華', '古亭', '松山', '大同', '桃園', '大園', '觀音', '平鎮', '龍潭', '湖口', '竹東', '新竹', '頭份', '苗栗', '三義', '豐原', '沙鹿', '大里', '忠明', '西屯', '彰化', '線西', '二林', '南投', '斗六', '崙背', '新港', '朴子', '臺西', '嘉義', '新營', '善化', '安南', '臺南', '美濃', '橋頭', '仁武', '鳳山', '大寮', '林園', '楠梓', '左營', '前金', '前鎮', '小港', '屏東', '潮州', '恆春', '臺東', '花蓮', '陽明', '宜蘭', '冬山', '三重', '中壢', '竹山', '永和', '復興', '埔里', '馬祖', '金門', '馬公', '關山', '麥寮', '富貴角', '大城', '高雄(湖內)', '臺南(麻豆)', '屏東(琉球)', '新北(樹林)', '臺南(學甲)', '屏東(枋寮)'];
let SN_array = ['基隆', '汐止'];
let aqidata = {};
class gasoLASS {
    constructor(runtime) {
        theLocale = this._setLocale();
        this.runtime = runtime;
        // communication related
        this.comm = runtime.ioDevices.comm;
        this.session = null;
        this.runtime.registerPeripheralExtension('gasoLASS', this);
        // session callbacks
        this.reporter = null;
        this.onmessage = this.onmessage.bind(this);
        this.onclose = this.onclose.bind(this);
        this.write = this.write.bind(this);
        // string op
        this.decoder = new TextDecoder();
        this.lineBuffer = '';
        this.data = {};
        //this.aqidata = {};
        this.emptyObj = {
            VALUE: {}
        };
        
    }
    

    onclose() {
        this.session = null;
    }

    write(data, parser = null) {
        if (this.session) {
            return new Promise(resolve => {
                if (parser) {
                    this.reporter = {
                        parser,
                        resolve
                    };
                }
                this.session.write(data);
            });
        }
    }

    onmessage(data) {
        const dataStr = this.decoder.decode(data);
        this.lineBuffer += dataStr;
        if (this.lineBuffer.indexOf('\n') !== -1) {
            const lines = this.lineBuffer.split('\n');
            this.lineBuffer = lines.pop();
            for (const l of lines) {
                if (this.reporter) {
                    const { parser, resolve } = this.reporter;
                    resolve(parser(l));
                }
            }
        }
    }

    scan() {
        this.comm.getDeviceList().then(result => {
            this.runtime.emit(this.runtime.constructor.PERIPHERAL_LIST_UPDATE, result);
        });
    }

    _setLocale() {
        let nowLocale = '';
        switch (formatMessage.setup().locale) {
            case 'zh-tw':
                nowLocale = 'zh-tw';
                break;
            default:
                nowLocale = 'en';
                break;
        }
        return nowLocale;
    }
    

    getInfo() {
        theLocale = this._setLocale();
        
        return {
            id: 'gasoLASS',
            name: 'LASS',
            color1: '#4a90e2',
            color2: '#4a90e2',
            menuIconURI: menuIconURI,
            blockIconURI: blockIconURI,
            blocks: [
                {
                    opcode: 'fetchLASS',
                    blockType: BlockType.COMMAND,
                    arguments: {
                        id: {
                            type: ArgumentType.STRING,
                            defaultValue: defaultId
                        }
                    },
                    text: msg.fetchLASS[theLocale]
                },

                {
                    opcode: 'onLASSReceived',
                    blockType: BlockType.HAT,
                    isEdgeActivated: false,
                    arguments: {},
                    text: msg.onLASSReceived[theLocale]
                },
                {
                    opcode: 'parseAttrFromLASS',
                    blockType: BlockType.REPORTER,
                    arguments: {
                        attr: {
                            type: ArgumentType.STRING,
                            menu: 'lassAttrs',
                            defaultValue: 's_d0'
                        }
                    },
                    text: msg.parseAttrFromLASS[theLocale]
                },
                "---",
                {
                    opcode: 'aqiLASS',
                    blockType: BlockType.REPORTER,
                    arguments: {
                        siteName: {
                            type: ArgumentType.STRING,
                            //menu:'sitename',
                            menu:'sitename',
                            defaultValue: defaultsiteName
                        },
                        attr: {
                            type: ArgumentType.STRING,
                            menu: 'aqiAttrs',
                            defaultValue: 'AQI',
                        }
                    },
                    text: msg.aqiLASS[theLocale]
                },
                {
                    opcode: 'SiteName',
                    blockType: BlockType.REPORTER,
                    text: msg.SiteName[theLocale]
                },
            ],
            menus: {
                lassAttrs: {
                    acceptReporters: true,
                    items: [
                        {
                            text: 'PM2.5',
                            value: 's_d0'
                        },
                        {
                            text: msg.tempc[theLocale],
                            value: 's_t0'
                        },
                        {
                            text: msg.humidity[theLocale],
                            value: 's_h0'
                        }
                    ]
                },                
                sitename:{
                    acceptReporters: true,
                    items: 'get_sitename_items',
                },
                aqiAttrs: {
                    acceptReporters: true,
                    items: [
                        {
                            text: 'AQI',
                            value: 'AQI'
                        },
                        {
                            text: 'PM2.5',
                            value: 'PM2.5'
                        },
                        {
                            text: 'PM10',
                            value: 'PM10'
                        },
                        {
                            text: 'O3',
                            value: 'O3'
                        },
                        {
                            text: msg.publishTime[theLocale],
                            value: 'PublishTime'
                        }
                    ]
                }
            }
        };
    }

    fetchLASS(args) {
        const id = args.id;
        const url = `${LASS_URI}${id}`;
        return fetch(url).then(res => {
            if (res.ok) {
                res.json().then(json => {
                    console.log('got origin lass set', json.feeds);
                    const data = json.feeds && json.feeds[0] ? json.feeds[0][Object.keys(json.feeds[0])[0]] : 'fetch error';
                    this.data.fetched = true;
                    this.data.data = JSON.stringify(data);
                    this.runtime.startHats('gasoLASS_onLASSReceived', {});
                });
            }
        });
    }

    isDataFetched() {
        return this.data.fetched;
    }

    onLASSReceived() {
        if (this.isDataFetched()) {
            return true;
        }
    }

    parseAttrFromLASS(args) {
        const attr = args.attr;
        if (this.isDataFetched()) {
            try {
                const parsed = JSON.parse(this.data.data);
                console.warn('parsed ', attr, parsed);
                const data = parsed[attr];
                return typeof data === 'string' ? data : JSON.stringify(data);
            } catch (err) {
                return `Error: ${err}`;
            }
        }
        return msg.readFromLASSErr[theLocale];
    }

    get_sitename_items(){
        this.getSiteName();
        let items = SN_array;
        return items;
    }

    // get sitename  add by estea
    async getSiteName(){
        const url = `${AQI_URI}`;
        return await fetch(url)
        .then(res => {
            if (res.ok) {
                res.json().then(json => {
                    const adata = json.records;
                    SN_array = [];
                    let aSN_array =[];
                    //console.log('aaa',adata.index.SiteName);
                    adata.forEach(function(data, index) {
                        let sn = JSON.stringify(data.SiteName);
                        sn = sn.replaceAll('"','');
                        aSN_array.push(sn);
                        //console.log(SiteName_array);
                      });
                      SN_array = JSON.parse(JSON.stringify(aSN_array));
                      //SN_array = aSN_array;
                      //console.log('SN_array:',aSN_array);
                      //console.log(SN_array);
                });
                //return SN_array;
            }
        })
        .catch((error) => {
            return `Error: ${error}`;
            console.log(`Error: ${error}`);
        });
    }    
    SiteName(){
        return SN_array;
    }
    
    async get_aqidata(siteName){
        const url = `${AQI_URI}`;
        const a_return = await fetch(url)
        .then(res => {
            if (res.ok) {
                res.json().then(json => {
                    const adata = json.records;
                    for (const [key, value] of Object.entries(adata)) {
                        const bdata = value;
                        for (const [key, value] of Object.entries(bdata)) {
                            if (`${key}: ${value}` == `${key}: ${siteName}`) {
                                aqidata = bdata;
                                break;
                            }
                        }

                        
                    }
                });
            }
        })
        .catch((error) => {
            return `Error: ${error}`;
            console.log(`Error: ${error}`);
        });

    }

    async aqiLASS(args) {
        const siteName = args.siteName;
        const attr = args.attr;
        const url = `${AQI_URI}`;
        //console.log('aqidata:',Object.keys(aqidata).length);
        this.get_aqidata(siteName);
        await this.get_aqidata(siteName);
        console.log('aqidata:',aqidata);
        //return await fetch(url)
        if (attr == 'AQI') {
            return aqidata.AQI;
        }else if (attr == 'PM2.5') {
            return aqidata['PM2.5'];
        }else if (attr == 'PM10') {
            return aqidata.PM10;
        }else if (attr == 'O3') {
            return aqidata.O3;
        }else if (attr == 'PublishTime') {
            return aqidata.PublishTime;
        }
    
    }
}

module.exports = gasoLASS;
